<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://s-seongsik.github.io/</id><title>SeongSik Seo</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-12-29T18:00:17+09:00</updated> <author> <name>seongsik seo</name> <uri>https://s-seongsik.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://s-seongsik.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://s-seongsik.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 seongsik seo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Git] branch의 이해와 사용(미완성)</title><link href="https://s-seongsik.github.io/posts/git-04/" rel="alternate" type="text/html" title="[Git] branch의 이해와 사용(미완성)" /><published>2021-12-04T00:00:00+09:00</published> <updated>2021-12-04T00:00:00+09:00</updated> <id>https://s-seongsik.github.io/posts/git-04/</id> <content src="https://s-seongsik.github.io/posts/git-04/" /> <author> <name>seongsik seo</name> </author> <category term="Git" /> <summary> 코드를 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 할 수 있게 만드는 것이 “브랜치” 입니다. Git의 최고의 장점이라고 말하는 “브랜치”에 대해 알아볼까요? Gti branch란? 모든 형상관리 시스템은 브랜치를 지원합니다. 팀 단위로 개발을 하다보면 각자 독립적인 공간에서 개발을 진행해야 서로의 소스코드가 섞이거나 충돌되는 것을 방지할 수 있습니다. 이런 이유로 브랜치 모델이 Git의 최고의 장점이라고 말합니다. Git branch는 매우 가벼우며 순식간에 브랜치를 새로 만들고 사이를 이동할 수 있습니다. 또한, Git은 branch를 만들어서 작업하고 merge 하는 방법을 권장합니다. </summary> </entry> <entry><title>[Git] Github 원격저장소와 로컬저장소 연동하기</title><link href="https://s-seongsik.github.io/posts/git-03/" rel="alternate" type="text/html" title="[Git] Github 원격저장소와 로컬저장소 연동하기" /><published>2021-12-03T00:00:00+09:00</published> <updated>2021-12-03T00:00:00+09:00</updated> <id>https://s-seongsik.github.io/posts/git-03/</id> <content src="https://s-seongsik.github.io/posts/git-03/" /> <author> <name>seongsik seo</name> </author> <category term="Git" /> <summary> 깃허브 원격저장소와 로컬저장소 연동을 머리속에서만 알고있었고, git 관련 명령어도 필요할 때마다 구글링으로 찾아서 처리했었는데… 날잡고 정리해서 내것으로 만들어야지 생각만하다가 오늘 정리하기로 맘먹었다. 오늘은! 로컬 저장소(workspace)를 깃허브 원격저장소에 연동하는 방법에 대해 포스팅 해보겠습니다. 참고로, git이 설치가 안되신분들은 git을 설치하고 오시기 바랍니다. 로컬 저장소 생성 Git Bash 실행 본인이 작업할 로컬 workspace(폴더)를 생성합니다. 생성할 위치 이동 + git_test라는 이름의 폴더 생성합니다. seong@DESKTOP-O5CIEJV MINGW64 ~ $ cd E:/project &amp;amp;&amp;amp; mkdir... </summary> </entry> <entry><title>[Git] Git 이해하기</title><link href="https://s-seongsik.github.io/posts/git-01/" rel="alternate" type="text/html" title="[Git] Git 이해하기" /><published>2021-12-02T00:00:00+09:00</published> <updated>2021-12-02T00:00:00+09:00</updated> <id>https://s-seongsik.github.io/posts/git-01/</id> <content src="https://s-seongsik.github.io/posts/git-01/" /> <author> <name>seongsik seo</name> </author> <category term="Git" /> <summary> Git과 Github를 활용하여 버전관리를 하는거에 익숙하지만, Git의 원리에 대해 묻는다면 정확하게 답변할 수 없습니다. 이번 포스팅은 Git의 배경과 원리를 이해하여 정리해보는 시간을 갖게 되었습니다. 목차는 아래와 같이 진행합니다. 버전 관리란? Git의 배경 Git의 원리 버전 관리란? 버전 관리 시스템이란? 파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템입니다. 버전 관리 방법은 크게 3가지로 나뉩니다. 로컬 버전 관리 디렉토리로 파일을 복사하는 방법 이 방법은 가장 간단하므로, 많은 사람들이 사용한다. 하지만, 작업 디렉토리를 삭제하거나, 실수로 인한 수정 및 복사가 발생할 수 있다는 단점이 있다. ... </summary> </entry> <entry><title>[python] Windows 스케줄러 기능으로 파이썬 스크립트 작업 등록하기</title><link href="https://s-seongsik.github.io/posts/python-scheduler-windows/" rel="alternate" type="text/html" title="[python] Windows 스케줄러 기능으로 파이썬 스크립트 작업 등록하기" /><published>2021-12-01T00:00:00+09:00</published> <updated>2021-12-01T00:00:00+09:00</updated> <id>https://s-seongsik.github.io/posts/python-scheduler-windows/</id> <content src="https://s-seongsik.github.io/posts/python-scheduler-windows/" /> <author> <name>seongsik seo</name> </author> <category term="Python" /> <summary> 오늘은 Python 스크립트를 windows 작업 스케줄러에 등록하는 방법에 대해 포스팅 해보겠습니다~ 이전에 Linux cron과 python apscheduler에 대해 포스팅을 하고나서 windows 에서 제공하는 작업 스케줄러에 대해 포스팅 해야겠다고 생각했습니다. Linux cron과 apscheduler에 대해 궁굼하신 분들은 밑의 링크를 눌러세요! [python] Apscheduler vs Cron Job 1. 윈도우 작업 스케줄러 실행 2. 윈도우 작업 등록 오른쪽 상단에 [작업 만들기]를 클릭 이름에는 작업 등록에 사용될 이름을 기입 관리자 권한으로 실행하는 경우가 많으므로, 가장 높은 수준의 권한으로 ... </summary> </entry> <entry><title>[python] Apscheduler vs Cron Job</title><link href="https://s-seongsik.github.io/posts/python-scheduler/" rel="alternate" type="text/html" title="[python] Apscheduler vs Cron Job" /><published>2021-11-30T00:00:00+09:00</published> <updated>2021-11-30T00:00:00+09:00</updated> <id>https://s-seongsik.github.io/posts/python-scheduler/</id> <content src="https://s-seongsik.github.io/posts/python-scheduler/" /> <author> <name>seongsik seo</name> </author> <category term="Python" /> <summary> python 개발일을 하다보면 스케줄러 프로그램을 만들일이 생기는데, python에서 스케줄러 라이브러리와 linux에서 제공하는 스케줄링 기능에 대해 알아보고 어떤 상황에 무엇을 사용해야 좋을지 포스팅 해보겠습니다. APScheduler Advanced Python Schedule의 약자로 python code가 한 번 또는 주기적으로 실행되도록 예약할 수 있는 python libary cron Daemon 이나 windows 작업 스케줄러와 같은 플랫폼별 스케줄러에 대체품으로 사용 scheduling 방식 Cron 스타일 스케줄링 Interval(간격) 기간 실행 일회성 지연 실행 같이 사용할 수 있는 시스템 메모리 (default) SQLAlchemy 몽... </summary> </entry> </feed>
