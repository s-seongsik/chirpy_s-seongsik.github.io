

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SeongSik Seo</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-01-10T10:53:39+09:00</updated>
  <author>
    <name>seongsik seo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 seongsik seo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[ESLint] 포맷팅에 특화된 프리티어(Prettier)</title>
    <link href="http://localhost:4000/posts/eslint-03/" rel="alternate" type="text/html" title="[ESLint] 포맷팅에 특화된 프리티어(Prettier)" />
    <published>2022-01-05T00:00:00+09:00</published>
  
    <updated>2022-01-05T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/eslint-03/</id>
    <content src="http://localhost:4000/posts/eslint-03/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="ESLint" />
    
  

  
    <summary>
      





      Prettier



ESLint는 포맷팅과 코드 품질에 도움을 주는 도구라면 프리티어(Prettier)는 포맷팅에만 특화된 도구이다.
ESLint에 없는 기능들을 프리티어(Prettier)가 해결해준다.



install

    npm install -D prettier




    var x = 'asd';;;

    console.log('########################################### 80자 넘음 #######################################################');




    module.exports = {
        "env": {
            "browser": true,
            "es2...
    </summary>
  

  </entry>

  
  <entry>
    <title>[ESLint] Style-Guide 설정</title>
    <link href="http://localhost:4000/posts/eslint-02/" rel="alternate" type="text/html" title="[ESLint] Style-Guide 설정" />
    <published>2022-01-05T00:00:00+09:00</published>
  
    <updated>2022-01-05T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/eslint-02/</id>
    <content src="http://localhost:4000/posts/eslint-02/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="ESLint" />
    
  

  
    <summary>
      





      style-guide



ESLint는 커스터마이징이 쉽고 확장성이 뛰어나 많이 사용되고 있는 추세이다.
또한, ESLint는 개발자들이 커스터마이징한 style-guide 설정들을 외부에 공개하여 공유할 수 있다.

가장 널리 쓰고있는 2가지를 소개하자면


  Airbnb Style Guide
  Google Style Guide


서로 제공하는 Style Guide를 참고하여 사용자의 목적에 맞게 사용하면 된다.



init

npx eslint --init으로  .eslintrc 파일을 생성한다.

    $ npx eslint --init
    √ How would you like to use ESLint? · problems
    √ What type of modules does y...
    </summary>
  

  </entry>

  
  <entry>
    <title>[ESLint] ESLint 시작하기</title>
    <link href="http://localhost:4000/posts/eslint-01/" rel="alternate" type="text/html" title="[ESLint] ESLint 시작하기" />
    <published>2022-01-05T00:00:00+09:00</published>
  
    <updated>2022-01-05T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/eslint-01/</id>
    <content src="http://localhost:4000/posts/eslint-01/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="ESLint" />
    
  

  
    <summary>
      





      ESLint란?




  ESLint란 코딩 컨벤션에 위배되는 코드나 안티 패턴을 자동으로 검출하는 분석 도구이다.
  코드를 분석하여 문법적인 오류나 안티 패턴을 찾고 일관된 코드 스타일로 작성할 수 있도록 도와준다.
  ESLint는 유용하게 사용할 수 있도록 style-guide를 제공한다.
  대표적으로 Airbnb Style Guide, Google Style Guide이 있다.
  개발자가 직접 style-guide를 작성할 수도 있다.


Install



   $ npm install eslint --save-dev


   $ mkdir eslint_sample  // 프로젝트 폴더 생성
   $ cd eslint_sample/    // 프로젝트 이동

   $ npm init  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>[기록] 나의 첫, 단독 SI프로젝트에서 생긴 문제들과 해결(미완성)</title>
    <link href="http://localhost:4000/posts/issue-01/" rel="alternate" type="text/html" title="[기록] 나의 첫, 단독 SI프로젝트에서 생긴 문제들과 해결(미완성)" />
    <published>2022-01-02T00:00:00+09:00</published>
  
    <updated>2022-01-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/issue-01/</id>
    <content src="http://localhost:4000/posts/issue-01/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Issue" />
    
  

  
    <summary>
      





      인트로



2021-01 ~ 2021-09

9개월간의 대장정의 서사시를 지금에서야 기록하게 된다.

본론전에, 나의 첫 번째 SI프로젝트는 만도였다. 6개월 동안 선배들과 상주하였고 동고동락하면서 선배들의 지식과 경험들을 흡수하기위해 노력했다.

1년차도 안된 주니어가 큰 프로젝트에 투입할 수 있다는것에 감사함과 행운을 가지고 어떻게 해서든 배워나갔다. 자바스크립트, 제이쿼리, HTML, CSS 등과 같은 기술들 그리고 소통과 협업… 그렇게, 나의 첫 실무경험이 시작되었다.

어느덧 6개월이 지나 끝나지않을 것 같았던 대장정이 마무리가 되었고, 다시 본사로 복귀하여 새로운 일거리를 찾아 서성였다.

그렇게 시작된 나의 첫 단독 프로젝트

PS테크놀로지의 환경안전 모니터링 시스템 프로젝트!!



문...
    </summary>
  

  </entry>

  
  <entry>
    <title>[ECMAScript6] let, const 키워드</title>
    <link href="http://localhost:4000/posts/javascript-04/" rel="alternate" type="text/html" title="[ECMAScript6] let, const 키워드" />
    <published>2022-01-02T00:00:00+09:00</published>
  
    <updated>2022-01-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/javascript-04/</id>
    <content src="http://localhost:4000/posts/javascript-04/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      ES6(2015) 이전에는 자바스크립트에서 변수를 선언할 수 있는 방법은 var뿐이었습니다.

이것은 많은 문제를 발생시켰습니다.


  전역 변수로 인한 스코프 충돌
    
      ES6이전에 스코프는 전역 스코프(Global Scope) 와 함수 스코프(Function Scope)만 있었습니다. 자바스크립트는 함수 스코프 외에는 모두 전역 스코프로 적용되기 때문에 전역 변수를 남발하여 스코프 충돌의 문제를 발생시켰습니다.
    
  
  변수 중복 선언
    
      자바스크립트의 코드양이 많으면 많을 수록 스코프 충돌의 문제를 발생시킵니다. 이미 선언된 변수를 또 재선언을 하거나 다른 값을 넣거나하는 문제를 발생할 수 있습니다.
    
  


보통 전역변수로 인해 발생하는 문제로,...
    </summary>
  

  </entry>

</feed>


