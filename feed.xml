

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SeongSik Seo</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-01-31T17:33:08+09:00</updated>
  <author>
    <name>seongsik seo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 seongsik seo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Vue.js] Vue의 핵심 기능인 컴포넌트는 무엇이고 어떻게 사용할까?</title>
    <link href="http://localhost:4000/posts/vueJs-05-copy/" rel="alternate" type="text/html" title="[Vue.js] Vue의 핵심 기능인 컴포넌트는 무엇이고 어떻게 사용할까?" />
    <published>2022-01-28T00:00:00+09:00</published>
  
    <updated>2022-01-28T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/vueJs-05-copy/</id>
    <content src="http://localhost:4000/posts/vueJs-05-copy/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Vue.js" />
    
  

  
    <summary>
      





      컴포넌트가 무엇인가?



컴포넌트는 Vue의 핵심 기능 중 하나이다.
컴포넌트를 어떻게 구성하고 생성하냐에 따라 어플리케이션의 개발속도와 코드 가독성, 그리고 효율성(ex. 재사용성)이 차이가 난다.

Vue에서 컴포넌트는 기본 HTML 엘리먼트를 확장하여 재사용 가능한 코드를 모듈화 혹은 캡슐화한 것을 의미한다. 상위 수준에서 컴포넌트는 Vue의 컴파일러에 의해 동작이 추가된 사용자 지정 엘리먼트이다. 경우에 따라 특별한 is 속성으로 확장 된 원시 HTML 엘리먼트로 나타날 수도 있다.

Vue 컴포넌트는 Vue 인스턴스이기도 하다. 그러므로 모든 옵션 객체를 사용할 수 있다. (루트에만 사용하는 옵션은 제외) 그리고 같은 라이프사이클 훅을 사용할 수 있다.

정리해서, 컴포넌트는 어플리케이션을 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Git] 개발자들은 Git으로 어떻게 협업할까? 워크플로우 배워보자</title>
    <link href="http://localhost:4000/posts/git-05/" rel="alternate" type="text/html" title="[Git] 개발자들은 Git으로 어떻게 협업할까? 워크플로우 배워보자" />
    <published>2022-01-26T00:00:00+09:00</published>
  
    <updated>2022-01-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/git-05/</id>
    <content src="http://localhost:4000/posts/git-05/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Git" />
    
  

  
    <summary>
      





      시작으로

먼저, Comparing Workflows의 글에서 자세히 공부할 수 있었다.
협업 뿐만아니라 Git에 대해 자세히 정리되어 있으니 참고하길 바란다.

글에서 정리한 대표적인 Git 워크플로우는 4가지이다.


  Centralized Workflow
  Feature Branch Workflow
  Gitflow Workflow
  Forking Workflow


이제 시작해보자~



Centralized Workflow





중앙 집중식 워크플로우로 SVN과 똑같이 중앙이 되는 메인 저장소를 중심으로 모든 변경 사항에 대해 main 분기에 커밋된다.
즉, Subversion을 사용하는 것과 똑같은 방식으로 프로젝트를 개발할 수 있다는 말이다.

하지만, SVN에 비해 몇가지 장점이...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Nuxt.js] 공식문서로 빠르게 배우기 2탄 - 디렉토리 구조 및 구성파일 설정</title>
    <link href="http://localhost:4000/posts/nuxtJs-02/" rel="alternate" type="text/html" title="[Nuxt.js] 공식문서로 빠르게 배우기 2탄 - 디렉토리 구조 및 구성파일 설정" />
    <published>2022-01-19T00:00:00+09:00</published>
  
    <updated>2022-01-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/nuxtJs-02/</id>
    <content src="http://localhost:4000/posts/nuxtJs-02/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Nuxt.js" />
    
  

  
    <summary>
      





      시작하기



Nuxt.js는 Vue.js기반 프레임워크이기 때문에 컴포넌트 구성 및 사용방법은 비슷할 것이라고 생각한다.

아래의 목차대로 빠르게 익혀보자.


  Nuxt.js의 프로젝트 구조
  라우터 방식의 차이
  Layout 디렉토리




Nuxt.js 프로젝트 구조



npm으로 생성한 프로젝트 구조를 살펴보면 아래와 같다.





Assets 디렉토리
SASS, CSS, IMAGES, Javascript와 같은 컴파일되지 않는 에셋들을 포함하는 디렉토리이다.

components 디렉토리
Vue.js 컴포넌트를 포함하는 디렉토리이다. Nuxt.js는 이러한 컴포넌트에 데이터 메소드를 크게 신경쓰지 않는다.

Layouts 디렉토리
디렉토리는 애플리케이션의 레이아웃을 포함하는 디렉토리...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Nuxt.js] 공식문서로 빠르게 배우기 1탄 - 시작하기</title>
    <link href="http://localhost:4000/posts/nuxtJs-01/" rel="alternate" type="text/html" title="[Nuxt.js] 공식문서로 빠르게 배우기 1탄 - 시작하기" />
    <published>2022-01-19T00:00:00+09:00</published>
  
    <updated>2022-01-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/nuxtJs-01/</id>
    <content src="http://localhost:4000/posts/nuxtJs-01/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Nuxt.js" />
    
  

  
    <summary>
      





      시작하기



Vue.js로 프로젝트를 진행하면서 SSR 웹 페이지를 만들 수 있도록 도와주는 Nuxt.js를 배워보고 싶다는 생각이 들었다. 설명과 이론을 최대한 배제하고 실무용으로 설치부터 배포까지 빠르게 익히기 위한 포스팅이다. 깃허브 정적 호스팅 서비스에 배포 할 Resume 정적 웹사이트를 만들어 보면서 빠르게 익혀보도록 하자.



Nuxt.js 사용하기 위한 전제 조건




  node.js 최신 LTS 버전을 설치하는 것을 권장한다.
  텍스트 편집기, Vetur 확장 기능이 있는 VSCode 또는 WebStorm 편집기를 사용하는 것을 권장한다.
  터미널은 VSCode의 통합 터미널, WebStorm 터미널 사용을 권장한다.
  npm(v6.1+)을 설치했는지 확인


참고로 npm...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Web] 서버 인증방식 Cookie, Session, Token</title>
    <link href="http://localhost:4000/posts/web-Autorization/" rel="alternate" type="text/html" title="[Web] 서버 인증방식 Cookie, Session, Token" />
    <published>2022-01-19T00:00:00+09:00</published>
  
    <updated>2022-01-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/web-Autorization/</id>
    <content src="http://localhost:4000/posts/web-Autorization/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Web" />
    
  

  
    <summary>
      





      이번에node.js기반 Vue.js로 웹 프론트엔드 개발을 맡게 되었는데 로그인 기능을 구현하면서 혼동되는 세션, 쿠키, 토큰의 개념을 정확하게 짚고 넘어가고 싶었다.



서버 인증이 필요한 이유



현재 앱/웹 서비스에서 가장 많이 쓰이는 통신 방식은 HTTP이다. 
클라이언트는 서버에게 GET, POST, PUT, DELETE 방식 중 하나로 요청을 보내게되고 요청 받은 자원에 대해 응답을 하게 된다. 
그런데 여기서 문제는 통신에 대한 기록이 남지 않는다는 것이다. 즉, 서버는 사용자가 누군지 모른다.

그 이유는 HTTP는 무상태 프로토콜(Stateless Protocol)이기 때문이다.
무상태 프로토콜을 간단하게 말하면 통신 파트너에 대한 세션 정보나 상태 보관을 요구(저장)하지 않는다는 ...
    </summary>
  

  </entry>

</feed>


