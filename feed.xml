

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SeongSik Seo</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-02-07T15:43:14+09:00</updated>
  <author>
    <name>seongsik seo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 seongsik seo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Javascript]] this는 어떻게 동작할까?</title>
    <link href="http://localhost:4000/posts/javascript-05/" rel="alternate" type="text/html" title="[Javascript]] this는 어떻게 동작할까?" />
    <published>2022-02-07T00:00:00+09:00</published>
  
    <updated>2022-02-07T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/javascript-05/</id>
    <content src="http://localhost:4000/posts/javascript-05/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      시작으로



Javascript에서 함수의 this 키워드는 다른 언어들과 다르게 동작한다. 이는 Java와 같은 익숙한 언어의 개념과 달라 개발자들에게 혼동을 준다.
대부분의 경우 this의 값은 함수를 호출한 방법에 의해 결정된다. 실행중에는 할당으로 설정할 수 없고 함수를 호출할 때 마다 다를 수 있다.

Java에서의 this는 인스턴스 자신을 가르키는 참조변수이다. this가 객체 자신에 대한 참조 값을 가지고 있다는 뜻이다. 주로 매개변수와 객체 자신이 가지고 있는 멤버변수명이 같은 경우 이를 구분하기 위해 사용된다.
하지만, Javascript의 경우 Java와 같이 this에 바인딩되는 객체는 한가지가 아니라 해당 함수 호출 방식에 따라 this에 바인딩되는 객체가 달라진다.



함수...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Nuxt.js] 공식문서로 빠르게 배우기 3탄 - Github에 정적 사이트 빌드 및 배포하기</title>
    <link href="http://localhost:4000/posts/nuxtJs-03/" rel="alternate" type="text/html" title="[Nuxt.js] 공식문서로 빠르게 배우기 3탄 - Github에 정적 사이트 빌드 및 배포하기" />
    <published>2022-02-01T00:00:00+09:00</published>
  
    <updated>2022-02-01T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/nuxtJs-03/</id>
    <content src="http://localhost:4000/posts/nuxtJs-03/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Nuxt.js" />
    
  

  
    <summary>
      





      시작하기



포트폴리오 사이트용으로 오픈소스 및 템플릿을 사용하려다 맘에 드는게 없어 직접 Nuxt.js + vuetify로 포트폴리오 정적 사이트를 만들었다.
정적 사이트를 빌드 및 배포하는 방법을 빠르게 공유하고자 한다.

Nuxt 공식문서를 들어가면 아주 자세히 설명되어 있으니 하나씩 따라해도 금방 이해가 될 것이다.



nuxt.config.js 설정



일단, 3가지만 설정하면 된다.


  target : 배포 대상을 명시하는 프로퍼티이다. 정적 사이트는 static을 추가해야하며 기본값은 server이다.
  router : base를 추가하지 않고 폴더를 배포한 경우 배포된 사이트를 방문하면 자산 누락으로 사이트가 작동하지 않을 수 있다. 이는 웹사이트가 루트가 아니라는 가정으로 넣...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Vue.js] Vue의 핵심 기능인 컴포넌트는 무엇이고 어떻게 사용할까?</title>
    <link href="http://localhost:4000/posts/vueJs-05-copy/" rel="alternate" type="text/html" title="[Vue.js] Vue의 핵심 기능인 컴포넌트는 무엇이고 어떻게 사용할까?" />
    <published>2022-01-28T00:00:00+09:00</published>
  
    <updated>2022-01-28T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/vueJs-05-copy/</id>
    <content src="http://localhost:4000/posts/vueJs-05-copy/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Vue.js" />
    
  

  
    <summary>
      





      컴포넌트가 무엇인가?



컴포넌트는 Vue의 핵심 기능 중 하나이다.
컴포넌트를 어떻게 구성하고 생성하냐에 따라 어플리케이션의 개발속도와 코드 가독성, 그리고 효율성(ex. 재사용성)이 차이가 난다.

Vue에서 컴포넌트는 기본 HTML 엘리먼트를 확장하여 재사용 가능한 코드를 모듈화 혹은 캡슐화한 것을 의미한다. 상위 수준에서 컴포넌트는 Vue의 컴파일러에 의해 동작이 추가된 사용자 지정 엘리먼트이다. 경우에 따라 특별한 is 속성으로 확장 된 원시 HTML 엘리먼트로 나타날 수도 있다.

Vue 컴포넌트는 Vue 인스턴스이기도 하다. 그러므로 모든 옵션 객체를 사용할 수 있다. (루트에만 사용하는 옵션은 제외) 그리고 같은 라이프사이클 훅을 사용할 수 있다.

정리해서, 컴포넌트는 어플리케이션을 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Git] 개발자들은 Git으로 어떻게 협업할까? 워크플로우 배워보자</title>
    <link href="http://localhost:4000/posts/git-05/" rel="alternate" type="text/html" title="[Git] 개발자들은 Git으로 어떻게 협업할까? 워크플로우 배워보자" />
    <published>2022-01-26T00:00:00+09:00</published>
  
    <updated>2022-01-26T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/git-05/</id>
    <content src="http://localhost:4000/posts/git-05/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Git" />
    
  

  
    <summary>
      





      시작으로

먼저, Comparing Workflows의 글에서 자세히 공부할 수 있었다.
협업 뿐만아니라 Git에 대해 자세히 정리되어 있으니 참고하길 바란다.

글에서 정리한 대표적인 Git 워크플로우는 4가지이다.


  Centralized Workflow
  Feature Branch Workflow
  Gitflow Workflow
  Forking Workflow


이제 시작해보자~



Centralized Workflow





중앙 집중식 워크플로우로 SVN과 똑같이 중앙이 되는 메인 저장소를 중심으로 모든 변경 사항에 대해 main 분기에 커밋된다.
즉, Subversion을 사용하는 것과 똑같은 방식으로 프로젝트를 개발할 수 있다는 말이다.

하지만, SVN에 비해 몇가지 장점이...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Nuxt.js] 공식문서로 빠르게 배우기 2탄 - 디렉토리 구조 및 구성파일 설정</title>
    <link href="http://localhost:4000/posts/nuxtJs-02/" rel="alternate" type="text/html" title="[Nuxt.js] 공식문서로 빠르게 배우기 2탄 - 디렉토리 구조 및 구성파일 설정" />
    <published>2022-01-19T00:00:00+09:00</published>
  
    <updated>2022-01-19T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/nuxtJs-02/</id>
    <content src="http://localhost:4000/posts/nuxtJs-02/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Nuxt.js" />
    
  

  
    <summary>
      





      시작하기



Nuxt.js는 Vue.js기반 프레임워크이기 때문에 컴포넌트 구성 및 사용방법은 비슷할 것이라고 생각한다.

아래의 목차대로 빠르게 익혀보자.


  Nuxt.js의 프로젝트 구조
  라우터 방식의 차이
  Layout 디렉토리




Nuxt.js 프로젝트 구조



npm으로 생성한 프로젝트 구조를 살펴보면 아래와 같다.





Assets 디렉토리
SASS, CSS, IMAGES, Javascript와 같은 컴파일되지 않는 에셋들을 포함하는 디렉토리이다.

components 디렉토리
Vue.js 컴포넌트를 포함하는 디렉토리이다. Nuxt.js는 이러한 컴포넌트에 데이터 메소드를 크게 신경쓰지 않는다.

Layouts 디렉토리
디렉토리는 애플리케이션의 레이아웃을 포함하는 디렉토리...
    </summary>
  

  </entry>

</feed>


