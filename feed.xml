

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SeongSik Seo</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-02-09T13:42:32+09:00</updated>
  <author>
    <name>seongsik seo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 seongsik seo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Node.js] Express API 서버 구축 - 앱 구조화 및 라우팅</title>
    <link href="http://localhost:4000/posts/Node.js-04/" rel="alternate" type="text/html" title="[Node.js] Express API 서버 구축 - 앱 구조화 및 라우팅" />
    <published>2022-02-09T00:00:00+09:00</published>
  
    <updated>2022-02-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Node.js-04/</id>
    <content src="http://localhost:4000/posts/Node.js-04/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Node.js" />
    
  

  
    <summary>
      





      사전준비



    </summary>
  

  </entry>

  
  <entry>
    <title>[Node.js] Express API 서버 구축 - 설치 및 실행</title>
    <link href="http://localhost:4000/posts/Node.js-03/" rel="alternate" type="text/html" title="[Node.js] Express API 서버 구축 - 설치 및 실행" />
    <published>2022-02-09T00:00:00+09:00</published>
  
    <updated>2022-02-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Node.js-03/</id>
    <content src="http://localhost:4000/posts/Node.js-03/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Node.js" />
    
  

  
    <summary>
      





      사전준비




  Node.js 설치
  VSCode




설치하기



작업 디렉토리 생성
$ mkdir myapp
$ cd myapp




npm package.json 생성
npm init 명령어를 실행하면 애플리케이션의 이름 및 버전과 같은 몇 가지 정보를 구성하게 되는데 대부분 기본값으로 넘긴다.
$ npm init


entry point는 app.js 혹은 자유롭게 작성해도된다.(package.json에서 자유롭게 수정가능)
entry point: (index.js)




Express 설치
Express를 임시로 설치하고 package.json에 종속 항목 목록에 추가하지 않으려면, --save 옵션을 생략한다.
$ npm install express --save



  –sav...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Javascript]] this는 어떻게 동작할까?</title>
    <link href="http://localhost:4000/posts/javascript-05/" rel="alternate" type="text/html" title="[Javascript]] this는 어떻게 동작할까?" />
    <published>2022-02-07T00:00:00+09:00</published>
  
    <updated>2022-02-07T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/javascript-05/</id>
    <content src="http://localhost:4000/posts/javascript-05/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      시작으로



Javascript에서 함수의 this 키워드는 다른 언어들과 다르게 동작한다. 이는 Java와 같은 익숙한 언어의 개념과 달라 개발자들에게 혼동을 준다.
대부분의 경우 this의 값은 함수를 호출한 방법에 의해 결정된다. 실행중에는 할당으로 설정할 수 없고 함수를 호출할 때 마다 다를 수 있다.

Java에서의 this는 인스턴스 자신을 가르키는 참조변수이다. this가 객체 자신에 대한 참조 값을 가지고 있다는 뜻이다. 주로 매개변수와 객체 자신이 가지고 있는 멤버변수명이 같은 경우 이를 구분하기 위해 사용된다.
하지만, Javascript의 경우 Java와 같이 this에 바인딩되는 객체는 한가지가 아니라 해당 함수 호출 방식에 따라 this에 바인딩되는 객체가 달라진다.



함수...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Git] Software 버전 관리 규칙, 어떻게 번호를 할당하는거야?</title>
    <link href="http://localhost:4000/posts/git-06/" rel="alternate" type="text/html" title="[Git] Software 버전 관리 규칙, 어떻게 번호를 할당하는거야?" />
    <published>2022-02-07T00:00:00+09:00</published>
  
    <updated>2022-02-07T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/git-06/</id>
    <content src="http://localhost:4000/posts/git-06/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Git" />
    
  

  
    <summary>
      





      시작으로



버전관리를 하기 위해 Git, Github, Gitea, Svn 등 툴을 사용하는 방법에 대해서만 관심이 있었는데 정작 버전관리를 하기 위한 규칙에 대해서는 관심이 없었다.

소프트웨어 할당하는 버전은 기본적으로 유의적 버전 2.0.0-ko2을 따른다고 한다. 나도 이 글을 보면서 지식을 남기기 위해 포스팅을 시작한다.

흔히 애플리케이션 버전정보를 보면 아래와 같이 x.x.x 3자리의 정수로 되어있다.





이런 형태의 버전 할당은 Semantic versioning의 규칙을 따른 방식이라고 한다.



Versioning



소프트웨어 개발 생태계는 수많은 사람들이 서로의 기술과 성과를 이어받아 오며 믿을 수 없는 수준의 협력 체제를 구축해오고 있다. 의존성은 이러한 협력체제에서...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Nuxt.js] 공식문서로 빠르게 배우기 3탄 - Github에 정적 사이트 빌드 및 배포하기</title>
    <link href="http://localhost:4000/posts/nuxtJs-03/" rel="alternate" type="text/html" title="[Nuxt.js] 공식문서로 빠르게 배우기 3탄 - Github에 정적 사이트 빌드 및 배포하기" />
    <published>2022-02-01T00:00:00+09:00</published>
  
    <updated>2022-02-01T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/nuxtJs-03/</id>
    <content src="http://localhost:4000/posts/nuxtJs-03/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Nuxt.js" />
    
  

  
    <summary>
      





      시작하기



포트폴리오 사이트용으로 오픈소스 및 템플릿을 사용하려다 맘에 드는게 없어 직접 Nuxt.js + vuetify로 포트폴리오 정적 사이트를 만들었다.
정적 사이트를 빌드 및 배포하는 방법을 빠르게 공유하고자 한다.

Nuxt 공식문서를 들어가면 아주 자세히 설명되어 있으니 하나씩 따라해도 금방 이해가 될 것이다.



nuxt.config.js 설정



일단, 3가지만 설정하면 된다.


  target : 배포 대상을 명시하는 프로퍼티이다. 정적 사이트는 static을 추가해야하며 기본값은 server이다.
  router : base를 추가하지 않고 폴더를 배포한 경우 배포된 사이트를 방문하면 자산 누락으로 사이트가 작동하지 않을 수 있다. 이는 웹사이트가 루트가 아니라는 가정으로 넣...
    </summary>
  

  </entry>

</feed>


