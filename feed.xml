

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>SeongSik Seo</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2022-02-18T09:57:59+09:00</updated>
  <author>
    <name>seongsik seo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator>
  <rights> © 2022 seongsik seo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Vue.js] 라이프사이클 훅 이해하기</title>
    <link href="http://localhost:4000/posts/vueJs-06/" rel="alternate" type="text/html" title="[Vue.js] 라이프사이클 훅 이해하기" />
    <published>2022-02-16T00:00:00+09:00</published>
  
    <updated>2022-02-16T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/vueJs-06/</id>
    <content src="http://localhost:4000/posts/vueJs-06/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Vue.js" />
    
  

  
    <summary>
      





      시작으로



라이프사이클이란 Vue의 인스턴스나 컴포넌트가 생성되어 소멸되기까지의 과정을 의미한다. 각 컴포넌트는 생성될 때 일련의 초기화 단계를 거치게 된다.

에를들어, 데이터 관찰, 템플릿 컴파일, 인스턴스를 DOM에 마운트, 데이터 변경 시 DOM 업데이트 등 그 과정에서 라이프사이클 훅이라는 함수도 실행되며, 사용자가 특정 단계에서 자신의 코드를 추가할 수 있는 기회를 제공한다.

밑에는 Vue.js 공식문서에서 제공하는 라이프사이클 다이어그램이다.



정리해서 Vue 인스턴스는 크게 4가지의 과정을 거치게 된다.

  생성 (create)
  DOM 부착 (mount)
  업데이트 (update)
  소멸 (destroy)


위의 과정에서, Vue는 각 단계에서 훅(Hook)을 할 수 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Node.js] Express API 서버 구축 - 앱 구조화 및 기본 라우팅</title>
    <link href="http://localhost:4000/posts/Node.js-04/" rel="alternate" type="text/html" title="[Node.js] Express API 서버 구축 - 앱 구조화 및 기본 라우팅" />
    <published>2022-02-09T00:00:00+09:00</published>
  
    <updated>2022-02-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Node.js-04/</id>
    <content src="http://localhost:4000/posts/Node.js-04/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Node.js" />
    
  

  
    <summary>
      





      Express 애플리케이션 생성기



Express 구조화된 애플리케이션을 생성하고 싶다면 express-generator를 사용하여 시작하면 된다.

일단 npm 패키지로 설치한다.
$ npm install express-generator -g




groupware-back-app이라는 Express 앱을 생성해보자.
$ express --view=pug groupware-back-app

   create : groupware-back-app\
   create : groupware-back-app\public\
   create : groupware-back-app\public\javascripts\
   create : groupware-back-app\public\images\
   cr...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Node.js] Express API 서버 구축 - 설치 및 실행</title>
    <link href="http://localhost:4000/posts/Node.js-03/" rel="alternate" type="text/html" title="[Node.js] Express API 서버 구축 - 설치 및 실행" />
    <published>2022-02-09T00:00:00+09:00</published>
  
    <updated>2022-02-09T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Node.js-03/</id>
    <content src="http://localhost:4000/posts/Node.js-03/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Node.js" />
    
  

  
    <summary>
      





      사전준비




  Node.js 설치
  VSCode




설치하기



작업 디렉토리 생성
$ mkdir myapp
$ cd myapp




npm package.json 생성
npm init 명령어를 실행하면 애플리케이션의 이름 및 버전과 같은 몇 가지 정보를 구성하게 되는데 대부분 기본값으로 넘긴다.
$ npm init


entry point는 app.js 혹은 자유롭게 작성해도된다.(package.json에서 자유롭게 수정가능)
entry point: (index.js)




Express 설치
Express를 임시로 설치하고 package.json에 종속 항목 목록에 추가하지 않으려면, --save 옵션을 생략한다.
$ npm install express --save



  –sav...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Git] .gitignore로 필요한 것만 관리하자</title>
    <link href="http://localhost:4000/posts/git-07/" rel="alternate" type="text/html" title="[Git] .gitignore로 필요한 것만 관리하자" />
    <published>2022-02-08T00:00:00+09:00</published>
  
    <updated>2022-02-08T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/git-07/</id>
    <content src="http://localhost:4000/posts/git-07/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Git" />
    
  

  
    <summary>
      





      .gitignore



Git, Github로 버전관리를 하다보면 git add . 으로 한번에 처리하는 경우가 많다. 그런데 npm 기반 프로젝트를 하다보니 node_modules같은 파일들은 추가할 필요가 없다. npm install 로 종속성 설치를 하면 끝이기 때문이다. 이럴 때 사용하는게 .gitignore 파일이다.

.gitignore 언제 사용하면 되는가?

  보안상 노출되면 안되는 파일이 있는 경우
  프로젝트와 관련없는 파일이 있는 경우
  용량이 너무 크거나 제외시키고 싶은 경우


결국엔, git add에 포함시키지 않는 경우  .gitignore을 사용한다고 보면된다.



.gitignore 작성하기



그냥 git init한 프로젝트에 .gitignore이름으로 파일을 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>[Javascript]] this는 어떻게 동작할까?</title>
    <link href="http://localhost:4000/posts/javascript-05/" rel="alternate" type="text/html" title="[Javascript]] this는 어떻게 동작할까?" />
    <published>2022-02-07T00:00:00+09:00</published>
  
    <updated>2022-02-07T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/javascript-05/</id>
    <content src="http://localhost:4000/posts/javascript-05/" />
    <author>
      <name>seongsik seo</name>
    </author>

  
    
    <category term="Javascript" />
    
  

  
    <summary>
      





      시작으로



Javascript에서 함수의 this 키워드는 다른 언어들과 다르게 동작한다. 이는 Java와 같은 익숙한 언어의 개념과 달라 개발자들에게 혼동을 준다.
대부분의 경우 this의 값은 함수를 호출한 방법에 의해 결정된다. 실행중에는 할당으로 설정할 수 없고 함수를 호출할 때 마다 다를 수 있다.

Java에서의 this는 인스턴스 자신을 가르키는 참조변수이다. this가 객체 자신에 대한 참조 값을 가지고 있다는 뜻이다. 주로 매개변수와 객체 자신이 가지고 있는 멤버변수명이 같은 경우 이를 구분하기 위해 사용된다.
하지만, Javascript의 경우 Java와 같이 this에 바인딩되는 객체는 한가지가 아니라 해당 함수 호출 방식에 따라 this에 바인딩되는 객체가 달라진다.



함수...
    </summary>
  

  </entry>

</feed>


